{"version":3,"sources":["services/api/request/api.js","services/api/handler/numberName.js","services/api/handler/addNumber.js","services/api/handler/shortData.js","services/api/handler/colorApp.js","component/Block.component.jsx","App.js","serviceWorker.js","index.js"],"names":["onData","a","fetch","getRequest","json","listUsers","DataFetch","NumberAndNameMounth","data","map","el","sec","Date","parse","dob","setObj","getMonth","toLocaleString","month","AddNumberPerson","dataMonth","forEach","i","count","el_data","j","ShortDaraSort","shortData","filter","sort","b","console","log","ColorApp","BlockComponent","data-tooltip","className","style","backgroundColor","key","App","useState","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8QAAA,WAAyBA,GAAzB,iBAAAC,EAAA,sEAC2BC,MAAM,kEADjC,cACQC,EADR,gBAE0BA,EAAWC,OAFrC,OAEQC,EAFR,OAGIL,EAAOK,GAHX,4C,sBAKeC,M,4CCKAC,EAVa,SAACC,GACzB,OAAOA,EAAKC,KAAI,SAACC,GACb,IAAIC,EAAMC,KAAKC,MAAMH,EAAGI,KACpBC,EAAS,IAAIH,KAAKD,GAGtB,MAAO,CAFWI,EAAOC,WACTD,EAAOE,eAAe,QAAS,CAAEC,MAAO,cCSjDC,EAdS,SAACC,GACrBA,EAAUC,SAAQ,SAACX,EAAIY,GACnB,IAAIC,EAAQ,EACZH,EAAUC,SAAQ,SAACG,EAASC,GACpBf,EAAG,KAAOc,EAAQ,KAClBD,IACID,EAAIG,IACJD,EAAQ,GAAK,aAIzBd,EAAG,GAAKa,MCJDG,EAPO,SAACN,GACnB,IAAMO,EAAYP,EAAUQ,QAAO,SAAAlB,GAAE,MAAc,UAAVA,EAAG,MAG5C,OAFAiB,EAAUE,MAAK,SAAC5B,EAAG6B,GAAJ,OAAU7B,EAAE,GAAK6B,EAAE,MAClCC,QAAQC,IAAIL,GACLA,GCWIM,EAfE,SAACvB,GACd,QAAQ,GACJ,KAAMA,GAAM,GAAKA,GAAM,EACnB,MAAO,OACX,KAAMA,EAAK,GAAKA,GAAM,EAClB,MAAO,OACX,KAAMA,EAAK,GAAKA,GAAM,GAClB,MAAO,QACX,KAAMA,EAAK,GACP,MAAO,QCOJwB,EAdQ,SAAC,GAA6B,IAA3BP,EAA0B,EAA1BA,UAAWM,EAAe,EAAfA,SACjC,OACIN,EAAUlB,KAAI,SAAAC,GAAE,OACZ,wBACIyB,eAAA,oBAA2BzB,EAAG,GAA9B,WACA0B,UAAU,kBACVC,MAAO,CAAEC,gBAAiBL,EAASvB,EAAG,KACtC6B,IAAK7B,EAAG,IAEPA,EAAG,QCwBL8B,EAxBH,WAAO,IAAD,EAEOC,mBAAS,IAFhB,mBAETjC,EAFS,KAEHR,EAFG,KAIhB0C,qBACE,kBAAMpC,EAAUN,KAChB,IAGF,IAAIoB,EAAYb,EAAoBC,GAEpCW,EAAgBC,GAEhB,IAAMO,EAAYD,EAAcN,GAEhC,OACE,yBAAKgB,UAAU,OACb,wBAAIA,UAAU,cACZ,kBAAC,EAAD,CAAgBT,UAAWA,EAAWM,SAAUA,OCjBpCU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.dfd831a7.chunk.js","sourcesContent":["async function DataFetch(onData) {\r\n    let getRequest = await fetch('https://yalantis-react-school-api.yalantis.com/api/task0/users');\r\n    let listUsers = await getRequest.json();\r\n    onData(listUsers);\r\n}\r\nexport default DataFetch;","const NumberAndNameMounth = (data) => {\r\n    return data.map((el) => {\r\n        let sec = Date.parse(el.dob);\r\n        let setObj = new Date(sec);\r\n        let numberMonth = setObj.getMonth();\r\n        let nameMonth = setObj.toLocaleString(\"en-US\", { month: 'long' });\r\n        return [numberMonth, nameMonth];\r\n    })\r\n}\r\n\r\nexport default NumberAndNameMounth;","const AddNumberPerson = (dataMonth) => {\r\n    dataMonth.forEach((el, i) => {\r\n        let count = 0;\r\n        dataMonth.forEach((el_data, j) => {\r\n            if (el[0] === el_data[0]) {\r\n                count++;\r\n                if (i < j) {\r\n                    el_data[3] = 'waste';\r\n                }\r\n            }\r\n        })\r\n        el[2] = count;\r\n    })\r\n}\r\nexport default AddNumberPerson;","const ShortDaraSort = (dataMonth) => {\r\n    const shortData = dataMonth.filter(el => el[3] !== 'waste');\r\n    shortData.sort((a, b) => a[0] - b[0]);\r\n    console.log(shortData);\r\n    return shortData;\r\n}\r\n\r\nexport default ShortDaraSort;","const ColorApp = (el) => {\r\n    switch (true) {\r\n        case (el >= 0 && el <= 2):\r\n            return 'gray';\r\n        case (el > 2 && el <= 6):\r\n            return 'blue';\r\n        case (el > 6 && el <= 10):\r\n            return 'green';\r\n        case (el > 10):\r\n            return 'red';\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nexport default ColorApp;\r\n","import React from 'react';\r\n\r\nconst BlockComponent = ({ shortData, ColorApp }) => {\r\n    return (\r\n        shortData.map(el =>\r\n            <li\r\n                data-tooltip={`there are ${el[2]} person`}\r\n                className=\"list__data-item\"\r\n                style={{ backgroundColor: ColorApp(el[2]) }}\r\n                key={el[0]} >\r\n\r\n                {el[1]}\r\n\r\n            </li>)\r\n    )\r\n}\r\nexport default BlockComponent;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\n\r\nimport DataFetch from './services/api/request/api'\r\nimport NumberAndNameMounth from \"./services/api/handler/numberName\";\r\nimport AddNumberPerson from './services/api/handler/addNumber';\r\nimport ShortDaraSort from './services/api/handler/shortData';\r\nimport ColorApp from './services/api/handler/colorApp';\r\n\r\nimport BlockComponent from './component/Block.component.jsx';\r\n\r\nconst App = () => {\r\n\r\n  const [data, onData] = useState([]);\r\n\r\n  useEffect(\r\n    () => DataFetch(onData),\r\n    []\r\n  )\r\n\r\n  let dataMonth = NumberAndNameMounth(data);\r\n\r\n  AddNumberPerson(dataMonth);\r\n\r\n  const shortData = ShortDaraSort(dataMonth);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <ul className=\"list__data\">\r\n        <BlockComponent shortData={shortData} ColorApp={ColorApp} />\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}